# Added by Edwin, this can be use temporarily for POC, Dev, Test Compute Instance (Server)
Hardening an Oracle Linux instance in OCI  steps to enhance the security of our system.  

### 1. **Update the System**
Ensure your system is up-to-date with the latest security patches.
```bash
sudo yum update -y
```

### 2. **Configure a Strong Password Policy**
Edit the PAM configuration to enforce strong password policies.
```bash
sudo vim /etc/security/pwquality.conf
```
Add or modify the following lines:
```
minlen = 12
dcredit = -1
ucredit = -1
ocredit = -1
lcredit = -1
```

### 3. **Disable Unnecessary Services**
Identify and disable services that are not required.
```bash
sudo systemctl list-unit-files | grep enabled
sudo systemctl disable <service_name>
```

### 4. **Configure Firewall**
Use `firewalld` to manage firewall rules.
```bash
sudo systemctl start firewalld
sudo systemctl enable firewalld
sudo firewall-cmd --permanent --add-service=ssh
sudo firewall-cmd --reload
```

### 5. **Set Up SELinux**
Ensure SELinux is enabled and enforcing.
```bash
sudo vim /etc/selinux/config
```
Set the following:
```
SELINUX=enforcing
SELINUXTYPE=targeted
```
Apply the changes:
```bash
sudo setenforce 1
```

### 6. **Limit SSH Access**
Configure SSH to improve security.
Edit the SSH configuration file:
```bash
sudo vim /etc/ssh/sshd_config
```
Make the following changes:
```
PermitRootLogin no
PasswordAuthentication no
AllowUsers your_user
```
Restart SSH service:
```bash
sudo systemctl restart sshd
```

### 7. **Implement Fail2Ban**
Install and configure Fail2Ban to prevent brute-force attacks.
```bash
sudo yum install fail2ban -y
sudo systemctl enable fail2ban
sudo systemctl start fail2ban
```
Edit the Fail2Ban configuration:
```bash
sudo vim /etc/fail2ban/jail.local
```
Add the following:
```
[sshd]
enabled = true
port = ssh
logpath = %(sshd_log)s
maxretry = 5
```
Restart Fail2Ban:
```bash
sudo systemctl restart fail2ban
```

### 8. **Audit and Logging**
Configure auditd to monitor and log system activities.
```bash
sudo yum install audit -y
sudo systemctl enable auditd
sudo systemctl start auditd
```
Edit the audit rules:
```bash
sudo vim /etc/audit/audit.rules
```
Add rules to monitor important files and directories, for example:
```
-w /etc/passwd -p wa -k identity
-w /etc/shadow -p wa -k identity
-w /var/log/ -p wa -k logins
```
Restart the auditd service:
```bash
sudo systemctl restart auditd
```

### 9. **Enable Automatic Updates**
Configure automatic updates to ensure your system remains updated.
```bash
sudo yum install yum-cron -y
sudo systemctl enable yum-cron
sudo systemctl start yum-cron
```

### 10. **User and Group Management**
Ensure proper user and group management.
- Remove unnecessary user accounts.
- Ensure appropriate user groups and permissions.

### 11. **Filesystem Integrity Check**
Install and configure AIDE (Advanced Intrusion Detection Environment).
```bash
sudo yum install aide -y
sudo aide --init
sudo mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
```
Schedule a regular check:
```bash
sudo crontab -e
```
Add the following line to run AIDE daily:
```
0 5 * * * /usr/sbin/aide --check
```

### 12. **Cloud-Specific Security Measures**
Utilize OCIâ€™s security features:
- **OCI Identity and Access Management (IAM):** Control who can access our cloud resources.
- **OCI Bastion:** Use the OCI Bastion service to provide secure access to our instances.
- **OCI Security Lists and Network Security Groups:** Configure to restrict network traffic.

### 13. **Regular Security Audits**
Perform regular security audits and vulnerability scans.

By following these steps, we can significantly enhance the security of our Oracle Linux instance in OCI. 
